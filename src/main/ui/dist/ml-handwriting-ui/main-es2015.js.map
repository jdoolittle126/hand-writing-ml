{"version":3,"sources":["./$_lazy_route_resource lazy namespace object","./src/app/app-routing.module.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/app.module.ts","./src/app/app.service.ts","./src/app/canvas/canvas.component.ts","./src/app/canvas/canvas.component.html","./src/app/footer/footer.component.ts","./src/app/footer/footer.component.html","./src/app/grid-canvas/grid-canvas.component.ts","./src/app/grid-canvas/grid-canvas.component.html","./src/app/header/header.component.ts","./src/app/header/header.component.html","./src/app/input/input.component.ts","./src/app/input/input.component.html","./src/app/model-builder/model-builder.component.ts","./src/app/model-builder/model-builder.component.html","./src/app/model-tester/model-tester.component.ts","./src/app/model-tester/model-tester.component.html","./src/app/models/ModelConfiguration.ts","./src/app/network-visualizer/network-visualizer.component.ts","./src/app/network-visualizer/network-visualizer.component.html","./src/app/util.ts","./src/environments/environment.ts","./src/main.ts"],"names":[],"mappings":"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","file":"main-es2015.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import {Component, OnDestroy, QueryList, ViewChild, ViewChildren} from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { AppService } from './app.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport {InputComponent} from \"./input/input.component\";\r\nimport {BuilderState} from \"./model-builder/model-builder.component\";\r\n\r\nexport enum AppState {\r\n  WELCOME,\r\n  TRAINING,\r\n  TESTING\r\n}\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title: string = 'ml-handwriting-ui';\r\n  appState: AppState = AppState.WELCOME;\r\n  session: string = '';\r\n  public boundedNextState = this.nextState.bind(this);\r\n\r\n  public startTraining() {\r\n    if (this.appState == AppState.WELCOME) {\r\n      this.nextState();\r\n    }\r\n  }\r\n\r\n  public nextState(session: string = '') {\r\n    this.session = session;\r\n    switch (this.appState) {\r\n      case AppState.WELCOME:\r\n        this.appState = AppState.TRAINING;\r\n        break;\r\n      case AppState.TRAINING:\r\n        this.appState = AppState.TESTING;\r\n        break;\r\n      default:\r\n        this.appState = AppState.TESTING;\r\n    }\r\n  }\r\n\r\n}\r\n","<body class=\"d-flex flex-column\">\r\n  <app-header></app-header>\r\n  <main class=\"container-fluid flex-fill px-0 bg-secondary pb-4\">\r\n    <section class=\"jumbotron text-center mb-4 rounded-0\">\r\n      <div class=\"container\">\r\n        <h1 class=\"jumbotron-heading\">Welcome!</h1>\r\n        <p class=\"lead text-muted\">\r\n          This site allows you to train a machine learning model to recognize your\r\n          handwriting! It was built using Angular and Java Spring Boot.\r\n        </p>\r\n        <p>\r\n          <a href=\"#\" (click)=\"startTraining()\" class=\"btn btn-primary m-2\">Build a new model</a>\r\n          <a href=\"#\" class=\"btn btn-secondary m-2 disabled\">Load from existing session</a>\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <model-builder *ngIf=\"appState > 0\" [onTrained]=\"boundedNextState\"></model-builder>\r\n    <model-tester *ngIf=\"appState > 1\" [sessionName]=\"session\"></model-tester>\r\n  </main>\r\n\r\n  <app-footer></app-footer>\r\n\r\n</body>\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\n\r\nimport {AppRoutingModule} from './app-routing.module';\r\nimport {HttpClientModule} from '@angular/common/http';\r\nimport {AppComponent} from './app.component';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {HeaderComponent} from './header/header.component';\r\nimport {FooterComponent} from './footer/footer.component';\r\nimport {CanvasComponent} from './canvas/canvas.component'\r\nimport {InputComponent} from './input/input.component'\r\nimport {ModelBuilderComponent} from './model-builder/model-builder.component';\r\nimport {ModelTesterComponent} from './model-tester/model-tester.component';\r\nimport {NetworkVisualizerComponent} from './network-visualizer/network-visualizer.component';\r\nimport {GridCanvasComponent} from './grid-canvas/grid-canvas.component';\r\n\r\n\r\n// state related imports\r\n// import { StoreModule } from '@ngrx/store';\r\n// import { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\n// import { reducers, metaReducers } from './app-state/reducers';\r\n// import { CustomRouterStateSerializer } from './app-state/shared/utils';\r\n// import { StoreRouterConnectingModule, RouterStateSerializer } from '@ngrx/router-store';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        HeaderComponent,\r\n        FooterComponent,\r\n        CanvasComponent,\r\n        InputComponent,\r\n        ModelBuilderComponent,\r\n        ModelTesterComponent,\r\n        NetworkVisualizerComponent,\r\n        GridCanvasComponent\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        AppRoutingModule,\r\n        BrowserAnimationsModule,\r\n        ReactiveFormsModule,\r\n        HttpClientModule,\r\n        /**\r\n         * StoreModule.forRoot is imported once in the root module, accepting a reducer\r\n         * function or object map of reducer functions. If passed an object of\r\n         * reducers, combineReducers will be run creating your application\r\n         * meta-reducer. This returns all providers for an @ngrx/store\r\n         * based application.\r\n\r\n         StoreModule.forRoot(reducers, { metaReducers }),\r\n\r\n         /**\r\n         * @ngrx/router-store keeps router state up-to-date in the store.\r\n\r\n         StoreRouterConnectingModule,\r\n\r\n         /**\r\n         * Store devtools instrument the store retaining past versions of state\r\n         * and recalculating new states. This enables powerful time-travel\r\n         * debugging.\r\n         *\r\n         * To use the debugger, install the Redux Devtools extension for either\r\n         * Chrome or Firefox\r\n         *\r\n         * See: https://github.com/zalmoxisus/redux-devtools-extension\r\n\r\n         !environment.production ? StoreDevtoolsModule.instrument() : [],\r\n\r\n         /**\r\n         * EffectsModule.forRoot() is imported once in the root module and\r\n         * sets up the effects class to be initialized immediately when the\r\n         * application starts.\r\n         *\r\n         * See: https://github.com/ngrx/platform/blob/master/docs/effects/api.md#forroot\r\n         */\r\n    ],\r\n    providers: [],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  rootURL = 'http://mlhandwriting-env.eba-6d8svthj.us-east-2.elasticbeanstalk.com/api';\r\n\r\n  trainingRequest(request: any) {\r\n      return this.http.post(this.rootURL + '/train', request);\r\n  }\r\n\r\n  recognitionRequest(request: any) {\r\n    return this.http.post(this.rootURL + '/identify', request);\r\n  }\r\n\r\n}\r\n","import {\r\n    Component,\r\n    Input,\r\n    AfterViewInit,\r\n    Output,\r\n    EventEmitter,\r\n    ViewChildren,\r\n    QueryList\r\n} from '@angular/core';\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {InputComponent} from \"../input/input.component\";\r\n\r\n@Component({\r\n    selector: 'app-canvas',\r\n    templateUrl: './canvas.component.html',\r\n    styleUrls: ['./canvas.component.css']\r\n})\r\n\r\nexport class CanvasComponent implements AfterViewInit {\r\n\r\n    @ViewChildren(InputComponent) components: QueryList<InputComponent>;\r\n\r\n    @Input() public trials: number = 1;\r\n    @Input() public data: {character: string, input: Array<{smoothImage: ImageData, pixelImage: ImageData}>} = null;\r\n\r\n    @Output() isAdded = new EventEmitter<{character: string, input: Array<{smoothImage: ImageData, pixelImage: ImageData}>}>();\r\n\r\n    public samples: Array<number>;\r\n    public locked: boolean;\r\n\r\n    charForm = new FormGroup({\r\n        selectedChar: new FormControl('', Validators.nullValidator && Validators.required),\r\n    });\r\n\r\n\r\n    ngOnInit() {\r\n        this.samples = Array.from(Array(this.trials),(x,i)=>i);\r\n\r\n        if (this.data != null) {\r\n            this.locked = true;\r\n            this.charForm.setValue({'selectedChar': this.data.character});\r\n        } else {\r\n            this.locked = false;\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n\r\n    }\r\n\r\n    private reset() {\r\n        this.clear();\r\n        this.charForm.reset();\r\n    }\r\n\r\n    public clear() {\r\n        this.components.forEach(item => item.clear())\r\n    }\r\n\r\n    public onAdd() {\r\n        if (!this.charForm.valid) {\r\n            return;\r\n        }\r\n\r\n        let character = this.charForm.value.selectedChar;\r\n        let outputs: Array<{smoothImage: ImageData, pixelImage: ImageData}> = [];\r\n        this.components.forEach(item => {\r\n            item.getViewData(({smoothImage, pixelImage}) => {\r\n                let output = {smoothImage: smoothImage, pixelImage: pixelImage};\r\n                outputs.push(output);\r\n                this.reset();\r\n                if (outputs.length == this.components.length) {\r\n                    console.log(this.charForm.value.selectedChar)\r\n                    this.isAdded.emit({character: character, input: outputs})\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n","<div class=\"\">\r\n    <form class=\"d-flex flex-column m-2 p-2\" [ngClass]=\"{'border border-light rounded': !locked }\" [formGroup]=\"charForm\" (ngSubmit)=\"onAdd()\" >\r\n        <div class=\"d-flex flex-row form-group\" *ngIf=\"!locked\" >\r\n            Char:&nbsp;&nbsp;<input type=\"text\" name=\"selectedChar\" class=\"form-control form-control-sm\" style=\"width: 50px !important;\" formControlName=\"selectedChar\" id=\"selectedChar\" placeholder=\"A\" maxlength=\"1\">\r\n        </div>\r\n        <div class=\"mb-0 text-center\" *ngIf=\"locked\">\r\n            <h6 class=\"h6\">{{charForm.value.selectedChar}}</h6>\r\n        </div>\r\n        <div *ngFor=\"let index of samples\" >\r\n            <input-canvas [data]=\"(data?.input[index] === null) ? null : {smoothImage: data.input[index].smoothImage, pixelImage: data.input[index].pixelImage}\"></input-canvas>\r\n        </div>\r\n        <div class=\"d-flex flex-row justify-content-between\" *ngIf=\"!locked\">\r\n            <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"clear()\">Clear</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-primary\" [disabled]=\"!charForm.valid\">Add</button>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html'\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  public year: number = new Date().getFullYear();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<footer class=\"text-muted text-center\">\r\n  <div class=\"container-fluid py-3 row align-content-center\">\r\n    <p class=\"col m-0\">© {{year}} Jonathan Doolittle</p>\r\n    <p class=\"col m-0\">Check out the <a href=\"https://github.com/jdoolittle126/hand-writing-ml\">GitHub</a>!</p>\r\n  </div>\r\n</footer>","import {AfterViewInit, Component, ElementRef, Input, OnInit, ViewChild} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'grid-canvas',\r\n    templateUrl: 'grid-canvas.component.html',\r\n    styleUrls: ['./grid-canvas.component.css']\r\n})\r\n\r\n// TODO Add to module!\r\nexport class GridCanvasComponent implements AfterViewInit {\r\n\r\n    @ViewChild('myCanvas') public canvas: ElementRef;\r\n\r\n    @Input() public cellSize: number = 10;\r\n    @Input() public borderSize: number = 1;\r\n    @Input() public gridHeight: number = 5;\r\n    @Input() public gridWidth: number = 5;\r\n\r\n    private canvasCx: CanvasRenderingContext2D;\r\n    private canvasEl: HTMLCanvasElement;\r\n\r\n    private grid: string[][];\r\n    private gridColor: string = 'black';\r\n\r\n    ngAfterViewInit() {\r\n        this.canvasEl = this.canvas.nativeElement;\r\n        this.canvasCx = this.canvasEl.getContext('2d');\r\n\r\n        this.canvasCx.fillStyle = this.gridColor;\r\n        this.canvasCx.strokeStyle = this.gridColor;\r\n\r\n        this.canvasEl.width = (this.cellSize + this.borderSize) * this.gridWidth + (this.borderSize * 2);\r\n        this.canvasEl.height = (this.cellSize + this.borderSize) * this.gridHeight + (this.borderSize * 2);\r\n        this.clear();\r\n    }\r\n\r\n    public clear() {\r\n        this.grid = Array.from({ length:this.gridWidth }, () => (Array.from({ length:this.gridHeight }, ()=> '')));\r\n        this.drawGrid();\r\n    }\r\n\r\n    public set(x: number, y: number, color: string, draw: boolean = true) {\r\n        if (this.grid && typeof this.grid[x][y] !== 'undefined') {\r\n            this.grid[x][y] = color;\r\n            if (draw) {\r\n                this.drawGrid();\r\n            }\r\n        }\r\n    }\r\n\r\n    public drawGrid(xStart: number = 0, yStart: number = 0) {\r\n        this.canvasCx.clearRect(0, 0, this.canvasEl.width, this.canvasEl.height);\r\n        let size = this.borderSize + this.cellSize;\r\n\r\n        for (let x = 0; x <  this.gridWidth; x++) {\r\n            for (let y = 0; y < this.gridHeight; y++) {\r\n                let cX = xStart + (x * this.cellSize);\r\n                let cY = yStart + (y *  this.cellSize);\r\n                this.canvasCx.fillStyle = this.gridColor;\r\n                this.canvasCx.strokeStyle = this.gridColor;\r\n                this.canvasCx.fillRect(cX, cY, size, size);\r\n\r\n                let color = (this.grid && typeof this.grid[x][y] !== 'undefined' && this.grid[x][y] !== '') ? this.grid[x][y] : 'NONE';\r\n\r\n                if (color == 'NONE') {\r\n                    this.canvasCx.clearRect(cX + this.borderSize, cY +  this.borderSize, this.cellSize - this.borderSize , this.cellSize - this.borderSize);\r\n                } else {\r\n                    this.canvasCx.fillStyle = color\r\n                    this.canvasCx.strokeStyle = color\r\n                    this.canvasCx.fillRect(cX + this.borderSize, cY +  this.borderSize, this.cellSize - this.borderSize , this.cellSize - this.borderSize);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n}","<canvas class=\"nn\" #myCanvas></canvas>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"header\">\r\n  <h1>Hand Writing Recognition with Machine Learning!</h1>\r\n</div>\r\n","import {\r\n    Component, Input, ElementRef, AfterViewInit, ViewChild, Output, EventEmitter\r\n} from '@angular/core';\r\nimport { fromEvent } from 'rxjs';\r\nimport { switchMap, takeUntil, pairwise } from 'rxjs/operators'\r\nimport {document} from \"ngx-bootstrap\";\r\nimport {ModelConfiguration} from \"../models/ModelConfiguration\";\r\n\r\n/*\r\n This code is based on https://medium.com/@tarik.nzl/creating-a-canvas-component-with-free-hand-drawing-with-rxjs-and-angular-61279f577415!\r\n */\r\n\r\n@Component({\r\n    selector: 'input-canvas',\r\n    templateUrl: './input.component.html',\r\n    styleUrls: ['./input.component.css']\r\n})\r\n\r\nexport class InputComponent implements AfterViewInit {\r\n\r\n    @ViewChild('smoothCanvas') public smoothCanvas: ElementRef;\r\n    @ViewChild('pixelCanvas') public pixelCanvas: ElementRef;\r\n\r\n    @Input() public width = 100;\r\n    @Input() public height = 100;\r\n    @Input() public data: {smoothImage: ImageData, pixelImage: ImageData} = null;\r\n\r\n    @Output() isAdded = new EventEmitter<{smoothImage: ImageData, pixelImage: ImageData}>();\r\n\r\n    public locked: boolean;\r\n    public isHovering = false;\r\n\r\n    private smoothCx: CanvasRenderingContext2D;\r\n    private smoothCanvasEl: HTMLCanvasElement;\r\n\r\n    private pixelCx: CanvasRenderingContext2D;\r\n    private pixelCanvasEl: HTMLCanvasElement;\r\n\r\n    ngOnInit() {\r\n        this.locked = this.data != null\r\n    }\r\n\r\n    public ngAfterViewInit() {\r\n        this.smoothCanvasEl = this.smoothCanvas.nativeElement;\r\n        this.smoothCx = this.smoothCanvasEl.getContext('2d');\r\n\r\n        this.pixelCanvasEl = this.pixelCanvas.nativeElement;\r\n        this.pixelCx = this.pixelCanvasEl.getContext('2d');\r\n\r\n        this.smoothCanvasEl.width = this.width;\r\n        this.smoothCanvasEl.height = this.height;\r\n\r\n        this.pixelCanvasEl.width = this.width;\r\n        this.pixelCanvasEl.height = this.height;\r\n\r\n        this.smoothCx.lineWidth = 15;\r\n        this.smoothCx.lineCap = 'round';\r\n        this.smoothCx.strokeStyle = '#000';\r\n\r\n        this.smoothCx.imageSmoothingEnabled = false;\r\n        this.pixelCx.imageSmoothingEnabled = false;\r\n\r\n        this.captureEvents(this.smoothCanvasEl);\r\n\r\n        if (this.locked) {\r\n            this.loadImage(this.data.smoothImage, this.data.pixelImage);\r\n        }\r\n    }\r\n\r\n    private static cropImageFromCanvas(ctx) {\r\n        let canvas = ctx.canvas,\r\n            w = canvas.width, h = canvas.height,\r\n            pix = {x:[], y:[]},\r\n            imageData = ctx.getImageData(0,0,canvas.width,canvas.height),\r\n            x, y, index;\r\n\r\n        for (y = 0; y < h; y++) {\r\n            for (x = 0; x < w; x++) {\r\n                index = (y * w + x) * 4;\r\n                if (imageData.data[index + 3] > 0) {\r\n                    pix.x.push(x);\r\n                    pix.y.push(y);\r\n                }\r\n            }\r\n        }\r\n        pix.x.sort(function(a,b){return a-b});\r\n        pix.y.sort(function(a,b){return a-b});\r\n        let n = pix.x.length-1;\r\n\r\n        w = 1 + pix.x[n] - pix.x[0];\r\n        h = 1 + pix.y[n] - pix.y[0];\r\n        let cut = ctx.getImageData(pix.x[0], pix.y[0], w, h);\r\n\r\n        canvas.width = w;\r\n        canvas.height = h;\r\n        ctx.putImageData(cut, 0, 0);\r\n    }\r\n\r\n    public showPixel() {\r\n        if (this.locked) {\r\n            this.isHovering = true;\r\n        }\r\n    }\r\n\r\n    public showSmooth() {\r\n        if (this.locked) {\r\n            this.isHovering = false;\r\n        }\r\n    }\r\n\r\n    public loadImage(smoothData: ImageData, pixelData: ImageData) {\r\n        this.smoothCx.putImageData(smoothData, 0, 0);\r\n        InputComponent.cropImageFromCanvas(this.smoothCx);\r\n\r\n        let renderCanvasEl: HTMLCanvasElement = document.createElement('canvas');\r\n        renderCanvasEl.className = 'nn';\r\n        renderCanvasEl.width = ModelConfiguration.PIXEL_GRID_WIDTH;\r\n        renderCanvasEl.height = ModelConfiguration.PIXEL_GRID_HEIGHT;\r\n        let context: CanvasRenderingContext2D = renderCanvasEl\r\n            .getContext('2d');\r\n\r\n        context.putImageData(pixelData, 0, 0);\r\n\r\n        let sImage = new Image(ModelConfiguration.PIXEL_GRID_WIDTH, ModelConfiguration.PIXEL_GRID_HEIGHT);\r\n        sImage.className = 'nn';\r\n        sImage.src = renderCanvasEl.toDataURL();\r\n        sImage.onload = () => {\r\n            let nScaleX = this.smoothCanvasEl.width / ModelConfiguration.PIXEL_GRID_WIDTH;\r\n            let nScaleY = this.smoothCanvasEl.height / ModelConfiguration.PIXEL_GRID_HEIGHT;\r\n            this.pixelCx.scale(nScaleX, nScaleY);\r\n            this.pixelCx.drawImage(renderCanvasEl, 0, 0)\r\n            InputComponent.cropImageFromCanvas(this.pixelCx);\r\n        };\r\n    }\r\n\r\n    public clear() {\r\n        this.smoothCanvasEl.getContext('2d')\r\n            .clearRect(0, 0, this.smoothCanvasEl.width, this.smoothCanvasEl.height);\r\n    }\r\n\r\n    public getBlankRenderCanvas(): {canvas: HTMLCanvasElement, context: CanvasRenderingContext2D} {\r\n        let renderCanvasEl: HTMLCanvasElement = document.createElement('canvas');\r\n        renderCanvasEl.className = 'nn';\r\n        renderCanvasEl.width = this.width;\r\n        renderCanvasEl.height = this.height;\r\n        let context: CanvasRenderingContext2D = renderCanvasEl\r\n            .getContext('2d');\r\n        context.imageSmoothingEnabled = false;\r\n\r\n        return {canvas: renderCanvasEl, context: context};\r\n    }\r\n\r\n    public getViewData(callback: ({smoothImage, pixelImage}) => void) {\r\n\r\n        let {canvas, context} = this.getBlankRenderCanvas();\r\n        context.putImageData(\r\n            this.smoothCx.getImageData(0, 0, this.smoothCanvasEl.width, this.smoothCanvasEl.height),\r\n            0, 0);\r\n        InputComponent.cropImageFromCanvas(context);\r\n\r\n        let smoothImageData = context.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n        let oldWidth = canvas.width;\r\n        let oldHeight = canvas.height;\r\n\r\n        let image = new Image();\r\n        image.className = 'nn';\r\n        image.src = canvas.toDataURL();\r\n        image.onload = () => {\r\n\r\n            let {canvas, context} = this.getBlankRenderCanvas();\r\n\r\n            canvas.width = ModelConfiguration.PIXEL_GRID_WIDTH;\r\n            canvas.height = ModelConfiguration.PIXEL_GRID_HEIGHT;\r\n\r\n            let scaleX = ModelConfiguration.PIXEL_GRID_WIDTH / oldWidth;\r\n            let scaleY = ModelConfiguration.PIXEL_GRID_HEIGHT / oldHeight;\r\n            context.scale(scaleX, scaleY);\r\n            context.drawImage(image, 0, 0);\r\n\r\n            let pixelImageData = context.getImageData(0, 0,  canvas.width,  canvas.height);\r\n\r\n            const { data } = pixelImageData;\r\n            const { length } = data;\r\n\r\n            for (let i = 0; i < length; i += 4) {\r\n                const a = data[i + 3];\r\n\r\n                if ( a < ModelConfiguration.PIXEL_ALPHA_THRESHOLD) {\r\n                    data[i + 0] = 255;\r\n                    data[i + 1] = 255;\r\n                    data[i + 2] = 255;\r\n                    data[i + 3] = 255;\r\n\r\n                } else {\r\n                    data[i + 0] = 0;\r\n                    data[i + 1] = 0;\r\n                    data[i + 2] = 0;\r\n                    data[i + 3] = 255;\r\n                }\r\n            }\r\n\r\n\r\n            let output = {smoothImage: smoothImageData, pixelImage: pixelImageData}\r\n            callback(output);\r\n            this.clear();\r\n        }\r\n    }\r\n\r\n\r\n    private captureEvents(canvasEl: HTMLCanvasElement) {\r\n        fromEvent(canvasEl, 'mousedown')\r\n            .pipe(\r\n                switchMap((e) => {\r\n                    return fromEvent(canvasEl, 'mousemove')\r\n                        .pipe(\r\n                            takeUntil(fromEvent(canvasEl, 'mouseup')),\r\n                            takeUntil(fromEvent(canvasEl, 'mouseleave')),\r\n                            pairwise()\r\n                        )\r\n                })\r\n            )\r\n            .subscribe((res: [MouseEvent, MouseEvent]) => {\r\n                const rect = canvasEl.getBoundingClientRect();\r\n\r\n                const prevPos = {\r\n                    x: res[0].clientX - rect.left,\r\n                    y: res[0].clientY - rect.top\r\n                };\r\n\r\n                const currentPos = {\r\n                    x: res[1].clientX - rect.left,\r\n                    y: res[1].clientY - rect.top\r\n                };\r\n\r\n                this.drawOnCanvas(prevPos, currentPos);\r\n            });\r\n    }\r\n\r\n    private drawOnCanvas(prevPos: { x: number, y: number }, currentPos: { x: number, y: number }) {\r\n        if (!this.smoothCx || this.locked) { return; }\r\n\r\n        this.smoothCx.beginPath();\r\n\r\n        if (prevPos) {\r\n            this.smoothCx.moveTo(prevPos.x, prevPos.y); // from\r\n            this.smoothCx.lineTo(currentPos.x, currentPos.y);\r\n            this.smoothCx.stroke();\r\n        }\r\n    }\r\n\r\n}\r\n","<div (mouseenter)=\"showPixel()\" (mouseleave)=\"showSmooth()\">\r\n    <canvas class=\"nn\" [hidden]=\"isHovering\" style=\"border: 1px solid #a8a8a8;\" #smoothCanvas></canvas>\r\n    <canvas class=\"nn\" [hidden]=\"!isHovering\" style=\"border: 1px solid #a8a8a8; width:100px; height: 100px;\" #pixelCanvas></canvas>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {takeUntil} from \"rxjs/operators\";\r\nimport {Util} from \"../util\";\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {AppService} from \"../app.service\";\r\nimport {Subject} from \"rxjs\";\r\n\r\nexport enum BuilderState {\r\n    SETTINGS,\r\n    TRAINING,\r\n    TRAINING_REQUESTED,\r\n    TRAINED\r\n}\r\n\r\n@Component({\r\n    selector: 'model-builder',\r\n    templateUrl: 'model-builder.component.html',\r\n    styleUrls: ['./model-builder.component.css']\r\n})\r\nexport class ModelBuilderComponent implements OnDestroy {\r\n\r\n    @Input() onTrained: (session: string) => void;\r\n\r\n    settingsForm = new FormGroup({\r\n        sampleNumber: new FormControl('1', Validators.nullValidator && Validators.required),\r\n        sessionName: new FormControl(Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10),\r\n            Validators.nullValidator && Validators.required\r\n        )\r\n    });\r\n\r\n    builderState: BuilderState = BuilderState.SETTINGS;\r\n    images: {character: string, input: Array<{smoothImage: ImageData, pixelImage: ImageData}>}[] = [];\r\n    stepNumber: number = 0;\r\n\r\n    destroy$: Subject<boolean> = new Subject<boolean>();\r\n\r\n    constructor(private appService: AppService) {\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next(true);\r\n        this.destroy$.unsubscribe();\r\n    }\r\n\r\n    nextState() {\r\n        switch (this.builderState) {\r\n            case BuilderState.SETTINGS:\r\n                this.builderState = BuilderState.TRAINING;\r\n                break;\r\n            case BuilderState.TRAINING:\r\n                this.builderState = BuilderState.TRAINING_REQUESTED;\r\n                break;\r\n            case BuilderState.TRAINING_REQUESTED:\r\n                this.builderState = BuilderState.TRAINED;\r\n                break;\r\n            default:\r\n                this.builderState = BuilderState.TRAINED;\r\n        }\r\n    }\r\n\r\n    onAdd(data: {character: string, input: Array<{smoothImage: ImageData, pixelImage: ImageData}>}) {\r\n        this.images.push(data);\r\n    }\r\n\r\n    onTrain() {\r\n        this.nextState();\r\n        let requestData: Array<{character: string, input: Array<Array<boolean>>}> = [];\r\n\r\n        for (const {character, input} of this.images) {\r\n            let pixelData: Array<Array<boolean>> = [];\r\n            for(const {smoothImage, pixelImage} of input) {\r\n                pixelData.push(Util.getPixelData(pixelImage));\r\n            }\r\n            requestData.push({character: character, input: pixelData})\r\n        }\r\n\r\n        let trainingRequest = {\r\n            sessionName: this.settingsForm.value.sessionName,\r\n            gridWidth: 5,\r\n            gridHeight: 6,\r\n            sampleCount: this.settingsForm.value.sampleNumber,\r\n            requestData: requestData\r\n        };\r\n\r\n        this.appService.trainingRequest(trainingRequest)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(data => {\r\n                console.log(data);\r\n                this.nextState();\r\n                this.onTrained(this.settingsForm.value.sessionName);\r\n            });\r\n    }\r\n\r\n\r\n}","<div>\r\n    <!-- MODEL BUILDER SETTINGS -->\r\n    <section>\r\n        <div class=\"container mt-2\" [formGroup]=\"settingsForm\" >\r\n            <div class=\"card\">\r\n                <h2 class=\"card-header\">Training Settings</h2>\r\n                <div class=\"card-body\">\r\n                    <div class=\"row\">\r\n                        <div class=\"form-group col-md-6\">\r\n                            <label for=\"sampleNumber\">Number of Samples</label>\r\n                            <input type=\"number\" name=\"sampleNumber\" class=\"form-control form-control-sm\" formControlName=\"sampleNumber\" id=\"sampleNumber\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"form-group col-md-6\">\r\n                            <label for=\"sessionName\">Session Name</label>\r\n                            <input type=\"text\" name=\"sessionName\" class=\"form-control form-control-sm\" formControlName=\"sessionName\" id=\"sessionName\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"card-footer\">\r\n                    <button (click)=\"nextState()\" [disabled]=\"builderState != 0\" class=\"btn btn-primary\">Training</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n    <!-- MODEL TRAINING -->\r\n    <section>\r\n        <div class=\"container mt-2\" *ngIf=\"builderState > 0\" >\r\n            <div class=\"card\">\r\n                <h2 class=\"card-header\">Train the model</h2>\r\n                <div class=\"card-body\">\r\n                    <div class=\"row\">\r\n                        <div *ngFor=\"let img of images;\">\r\n                            <div class=\"col-3\">\r\n                                <app-canvas [data]=\"img\" [trials]=\"settingsForm.value.sampleNumber\" ></app-canvas>\r\n                            </div>\r\n                        </div>\r\n                        <app-canvas (isAdded)=\"onAdd($event)\" *ngIf=\"builderState == 1\" [trials]=\"settingsForm.value.sampleNumber\"></app-canvas>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"card-footer\">\r\n                    <button (click)=\"onTrain()\" [disabled]=\"builderState != 1 || images.length == 0\" class=\"btn btn-primary\">Train the Model!</button>\r\n                    <p *ngIf=\"builderState == 2\">Loading... please wait!</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n\r\n</div>","import {Component, Input, OnDestroy, OnInit, ViewChild} from '@angular/core';\r\nimport {takeUntil} from \"rxjs/operators\";\r\nimport {InputComponent} from \"../input/input.component\";\r\nimport {Util} from \"../util\";\r\nimport {AppService} from \"../app.service\";\r\nimport {Subject} from \"rxjs\";\r\nimport {NetworkVisualizerComponent} from \"../network-visualizer/network-visualizer.component\";\r\n\r\nexport type GridData = {\r\n    width: number;\r\n    height: number;\r\n    data: number[];\r\n};\r\n\r\nexport type NetworkResult = {\r\n    inputsGrid: GridData;\r\n    weights1Grid: GridData;\r\n    hiddenGrid: GridData;\r\n    weights2Grid: GridData;\r\n    outputGrid: GridData;\r\n};\r\n\r\nexport type RecognitionResult = {\r\n    guess: string;\r\n    characters: string[];\r\n    inputs: number[];\r\n    weights1: number[];\r\n    hiddens: number[];\r\n    weights2: number[];\r\n    confidence: number[];\r\n}\r\n\r\n@Component({\r\n    selector: 'model-tester',\r\n    templateUrl: 'model-tester.component.html',\r\n    styleUrls: ['./model-tester.component.css']\r\n})\r\n\r\n\r\n// TODO Add to module!\r\nexport class ModelTesterComponent implements OnDestroy, OnInit {\r\n\r\n    @ViewChild('input') sampleInput: InputComponent;\r\n    @ViewChild('visual') networkVisual: NetworkVisualizerComponent;\r\n\r\n    @Input() sessionName: string;\r\n\r\n    previousSamples: {character: string, input: {smoothImage: ImageData, pixelImage: ImageData}}[] = [];\r\n    sample: {smoothImage: ImageData, pixelImage: ImageData} = null;\r\n    destroy$: Subject<boolean> = new Subject<boolean>();\r\n\r\n    networkResult: NetworkResult = null;\r\n\r\n    constructor(private appService: AppService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next(true);\r\n        this.destroy$.unsubscribe();\r\n    }\r\n\r\n    onClear() {\r\n        this.sampleInput.clear();\r\n    }\r\n\r\n    onTry() {\r\n\r\n        this.sampleInput.getViewData(({smoothImage, pixelImage}) => {\r\n            this.sample = {smoothImage: smoothImage, pixelImage: pixelImage};\r\n\r\n            let recognitionRequest = {\r\n                sessionName: this.sessionName,\r\n                data: Util.getPixelData(this.sample.pixelImage)\r\n            }\r\n\r\n            this.appService.recognitionRequest(recognitionRequest).pipe(takeUntil(this.destroy$)).subscribe(data => {\r\n\r\n                let result: RecognitionResult = {\r\n                    guess: data['guess'],\r\n                    characters: data['characters'],\r\n                    inputs: data['inputs'],\r\n                    weights1: data['weights1'],\r\n                    hiddens: data['hiddens'],\r\n                    weights2: data['weights2'],\r\n                    confidence: data['confidence'],\r\n                }\r\n\r\n                let networkResult: NetworkResult = {\r\n                    inputsGrid: {\r\n                        width: result.inputs.length,\r\n                        height: 1,\r\n                        data: result.inputs\r\n                    },\r\n                    weights1Grid: {\r\n                        width: result.inputs.length,\r\n                        height: result.hiddens.length,\r\n                        data: result.weights1\r\n                    },\r\n                    hiddenGrid: {\r\n                        width: 1,\r\n                        height: result.hiddens.length,\r\n                        data: result.hiddens\r\n                    },\r\n                    weights2Grid: {\r\n                        width: result.characters.length,\r\n                        height: result.hiddens.length,\r\n                        data: result.weights2\r\n                    },\r\n                    outputGrid: {\r\n                        width: result.confidence.length,\r\n                        height: 1,\r\n                        data: result.confidence\r\n                    }\r\n                }\r\n\r\n                console.log(networkResult.inputsGrid)\r\n\r\n                this.networkResult = networkResult;\r\n\r\n                this.previousSamples.push({\r\n                    character: data['guess'],\r\n                    input: {smoothImage: smoothImage, pixelImage: pixelImage}\r\n                });\r\n\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n\r\n}","<div class=\"container mt-2\" >\r\n\r\n    <section class=\"card\">\r\n        <h2 class=\"card-header\">Test your model!</h2>\r\n        <div class=\"card-body\">\r\n\r\n            <div class=\"row\" *ngIf=\"previousSamples.length > 0\">\r\n                <div *ngFor=\"let img of previousSamples;\">\r\n                    <div class=\"col-3\">\r\n                        <input-canvas class=\"text-center\" [data]=\"img.input\"></input-canvas>\r\n                        <p class=\"text-center font-weight-bold\">{{img.character}}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row justify-content-around align-items-center\">\r\n                <div class=\"col-4\">\r\n                    <input-canvas class=\"text-center\" [data]=\"sample\" #input></input-canvas>\r\n                </div>\r\n\r\n                <network-visualizer *ngIf=\"networkResult != null\" #visual class=\"col\" [inputData]=\"networkResult\" [colorEmpty]=\"'#FF0000'\" [colorFull]=\"'#0000FF'\" ></network-visualizer>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"card-footer\">\r\n            <button (click)=\"onClear()\" class=\"btn btn-danger mr-2\">Clear</button>\r\n            <button (click)=\"onTry()\" class=\"btn btn-primary\">Test</button>\r\n        </div>\r\n\r\n    </section>\r\n</div>","class TrainingData {\r\n    character: string;\r\n    input: Array<CanvasImageData>;\r\n}\r\n\r\nclass CanvasImageData {\r\n    smoothImage: ImageData;\r\n    pixelImage: ImageData;\r\n}\r\n\r\nclass ModelConfiguration {\r\n    static PIXEL_GRID_WIDTH: number = 5;\r\n    static PIXEL_GRID_HEIGHT: number = 6;\r\n    static PIXEL_ALPHA_THRESHOLD: number = 100;\r\n    numberOfSamples: number;\r\n    sessionName: string;\r\n\r\n}\r\n\r\nexport {TrainingData, CanvasImageData, ModelConfiguration};","import {AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild} from '@angular/core';\r\nimport {ModelConfiguration} from \"../models/ModelConfiguration\";\r\nimport {GridCanvasComponent} from \"../grid-canvas/grid-canvas.component\";\r\nimport {GridData, NetworkResult} from \"../model-tester/model-tester.component\";\r\nimport {Util} from \"../util\";\r\n\r\n@Component({\r\n    selector: 'network-visualizer',\r\n    templateUrl: 'network-visualizer.component.html',\r\n    styleUrls: ['./network-visualizer.component.css']\r\n})\r\n\r\nexport class NetworkVisualizerComponent implements AfterViewInit, OnChanges {\r\n\r\n    @ViewChild('inputs') public inputs: GridCanvasComponent\r\n    @ViewChild('weights1') public weights1: GridCanvasComponent\r\n    @ViewChild('hidden') public hidden: GridCanvasComponent\r\n    @ViewChild('weights2') public weights2: GridCanvasComponent\r\n    @ViewChild('outputs') public outputs: GridCanvasComponent\r\n\r\n    @Input() public inputData: NetworkResult = null;\r\n    @Input() public colorEmpty: string;\r\n    @Input() public colorFull: string;\r\n\r\n    ngAfterViewInit() {\r\n        this.render();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.render();\r\n    }\r\n\r\n    private setFor(component: GridCanvasComponent, data: GridData) {\r\n        let index = 0;\r\n        let min = Math.min(...data.data);\r\n        let max = Math.max(...data.data);\r\n\r\n        for (let x = 0; x < data.width; x++) {\r\n            for (let y = 0; y < data.height; y++) {\r\n                let percent = (min == max) ? 1 : (data.data[index] - min) / (max - min);\r\n                let color = Util.newColor(this.colorEmpty, this.colorFull, percent);\r\n                component.set(x, y, color, false);\r\n                index++;\r\n            }\r\n        }\r\n        component.drawGrid();\r\n    }\r\n\r\n    public render() {\r\n\r\n        this.setFor(this.inputs, this.inputData.inputsGrid);\r\n        this.setFor(this.weights1, this.inputData.weights1Grid);\r\n        this.setFor(this.hidden, this.inputData.hiddenGrid);\r\n        this.setFor(this.weights2, this.inputData.weights2Grid);\r\n        this.setFor(this.outputs, this.inputData.outputGrid);\r\n\r\n        this.inputs.drawGrid();\r\n        this.weights1.drawGrid();\r\n        this.hidden.drawGrid();\r\n        this.weights2.drawGrid();\r\n        this.outputs.drawGrid();\r\n    }\r\n\r\n\r\n\r\n}","<div class=\"container\">\r\n    <div class=\"grid-container\">\r\n\r\n        <div class=\"inputs\">\r\n            <p class=\"\">Inputs:</p>\r\n            <grid-canvas [gridWidth]=\"inputData.inputsGrid.width\" [gridHeight]=\"inputData.inputsGrid.height\" #inputs></grid-canvas>\r\n        </div>\r\n\r\n        <div class=\"outputs\">\r\n            <p class=\"\">Outputs:</p>\r\n            <grid-canvas [gridWidth]=\"inputData.outputGrid.width\" [gridHeight]=\"inputData.outputGrid.height\" #outputs></grid-canvas>\r\n        </div>\r\n\r\n        <div class=\"weights1\">\r\n            <p class=\"\">Weights:</p>\r\n            <grid-canvas [gridWidth]=\"inputData.weights1Grid.width\" [gridHeight]=\"inputData.weights1Grid.height\" #weights1></grid-canvas>\r\n        </div>\r\n\r\n        <div class=\"hiddens\">\r\n            <p class=\"\">Hidden:</p>\r\n            <grid-canvas class=\"d-inline-block\" [gridWidth]=\"inputData.hiddenGrid.width\" [gridHeight]=\"inputData.hiddenGrid.height\" #hidden></grid-canvas>\r\n        </div>\r\n\r\n        <div class=\"weights2\">\r\n            <p class=\"\">Weights:</p>\r\n            <grid-canvas [gridWidth]=\"inputData.weights2Grid.width\" [gridHeight]=\"inputData.weights2Grid.height\" #weights2></grid-canvas>\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n\r\n</div>","import {ModelConfiguration} from \"./models/ModelConfiguration\";\r\n\r\nexport class Util {\r\n\r\n    public static getPixelData(pixelImageData: ImageData): Array<boolean> {\r\n        let results: Array<boolean> = [];\r\n        const { data } = pixelImageData;\r\n\r\n\r\n        for (let x = 0; x < ModelConfiguration.PIXEL_GRID_WIDTH; x++) {\r\n            for (let y = 0; y < ModelConfiguration.PIXEL_GRID_HEIGHT; y++) {\r\n                let index = 4 * (ModelConfiguration.PIXEL_GRID_WIDTH * y + x);\r\n                let isFilled: boolean = !((data[index] + data[index + 1] + data[index + 2]) > 0);\r\n                results.push(isFilled);\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public static newColor(colorStart: string, colorEnd: string, mix: number){\r\n        let hexStart = this.hexToRgb(colorStart);\r\n        let hexEnd = this.hexToRgb(colorEnd);\r\n\r\n\r\n        let newRgb = [\r\n            Math.ceil(((1 - mix) * hexStart.r) + (mix * hexEnd.r)),\r\n            Math.ceil(((1 - mix) * hexStart.g) + (mix * hexEnd.g)),\r\n            Math.ceil(((1 - mix) * hexStart.b) + (mix * hexEnd.b))\r\n        ];\r\n\r\n\r\n        return this.rgbToHex(newRgb[0], newRgb[1], newRgb[2]);\r\n    }\r\n\r\n    public static toHex(c: number) {\r\n        let hex = c.toString(16);\r\n        return hex.length == 1 ? \"0\" + hex : hex;\r\n    }\r\n\r\n    public static hexToRgb(hex) {\r\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16)\r\n        } : null;\r\n    }\r\n\r\n    public static rgbToHex(r, g, b) {\r\n        return \"#\" + this.toHex(r) + this.toHex(g) + this.toHex(b);\r\n    }\r\n\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":"webpack:///"}