{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/app.service.ts","webpack:///src/app/canvas/canvas.component.ts","webpack:///src/app/canvas/canvas.component.html","webpack:///src/app/footer/footer.component.ts","webpack:///src/app/footer/footer.component.html","webpack:///src/app/grid-canvas/grid-canvas.component.ts","webpack:///src/app/grid-canvas/grid-canvas.component.html","webpack:///src/app/header/header.component.ts","webpack:///src/app/header/header.component.html","webpack:///src/app/input/input.component.ts","webpack:///src/app/input/input.component.html","webpack:///src/app/model-builder/model-builder.component.ts","webpack:///src/app/model-builder/model-builder.component.html","webpack:///src/app/model-tester/model-tester.component.ts","webpack:///src/app/model-tester/model-tester.component.html","webpack:///src/app/models/ModelConfiguration.ts","webpack:///src/app/network-visualizer/network-visualizer.component.ts","webpack:///src/app/network-visualizer/network-visualizer.component.html","webpack:///src/app/util.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","AppRoutingModule","forRoot","imports","AppState","AppComponent","title","appState","WELCOME","session","boundedNextState","nextState","bind","TRAINING","TESTING","startTraining","selector","templateUrl","styleUrls","AppModule","declarations","providers","bootstrap","AppService","http","rootURL","request","post","providedIn","CanvasComponent","trials","data","isAdded","charForm","selectedChar","nullValidator","required","samples","Array","from","x","i","locked","setValue","character","clear","reset","components","forEach","item","valid","value","outputs","getViewData","smoothImage","pixelImage","output","push","length","console","log","emit","input","onAdd","FooterComponent","year","Date","getFullYear","GridCanvasComponent","cellSize","borderSize","gridHeight","gridWidth","gridColor","canvasEl","canvas","nativeElement","canvasCx","getContext","fillStyle","strokeStyle","width","height","grid","drawGrid","y","color","draw","xStart","yStart","clearRect","size","cX","cY","fillRect","HeaderComponent","InputComponent","isHovering","smoothCanvasEl","smoothCanvas","smoothCx","pixelCanvasEl","pixelCanvas","pixelCx","lineWidth","lineCap","imageSmoothingEnabled","captureEvents","loadImage","smoothData","pixelData","putImageData","cropImageFromCanvas","renderCanvasEl","createElement","className","PIXEL_GRID_WIDTH","PIXEL_GRID_HEIGHT","context","sImage","Image","src","toDataURL","onload","nScaleX","nScaleY","scale","drawImage","callback","getBlankRenderCanvas","getImageData","smoothImageData","oldWidth","oldHeight","image","scaleX","scaleY","pixelImageData","a","PIXEL_ALPHA_THRESHOLD","pipe","subscribe","res","rect","getBoundingClientRect","prevPos","clientX","left","clientY","top","currentPos","drawOnCanvas","beginPath","moveTo","lineTo","stroke","ctx","w","h","pix","imageData","index","sort","b","n","cut","showPixel","showSmooth","BuilderState","ModelBuilderComponent","appService","settingsForm","sampleNumber","sessionName","Math","random","toString","replace","substr","builderState","SETTINGS","images","stepNumber","destroy$","next","unsubscribe","TRAINING_REQUESTED","TRAINED","requestData","getPixelData","trainingRequest","sampleCount","onTrained","ModelTesterComponent","previousSamples","sample","networkResult","sampleInput","recognitionRequest","result","guess","characters","inputs","weights1","hiddens","weights2","confidence","inputsGrid","weights1Grid","hiddenGrid","weights2Grid","outputGrid","onClear","onTry","TrainingData","CanvasImageData","ModelConfiguration","NetworkVisualizerComponent","inputData","render","changes","component","min","max","percent","newColor","colorEmpty","colorFull","set","setFor","hidden","Util","results","isFilled","colorStart","colorEnd","mix","hexStart","hexToRgb","hexEnd","newRgb","ceil","r","g","rgbToHex","c","hex","exec","parseInt","toHex","environment","production","bootstrapModule","catch","err","error"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nconst routes: Routes = [];\r\n\r\n@NgModule({\r\n  imports: [RouterModule.forRoot(routes)],\r\n  exports: [RouterModule]\r\n})\r\nexport class AppRoutingModule { }\r\n","import {Component, OnDestroy, QueryList, ViewChild, ViewChildren} from '@angular/core';\r\nimport { FormGroup, FormControl, Validators } from '@angular/forms';\r\nimport { AppService } from './app.service';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport { Subject } from 'rxjs';\r\nimport {InputComponent} from \"./input/input.component\";\r\nimport {BuilderState} from \"./model-builder/model-builder.component\";\r\n\r\nexport enum AppState {\r\n  WELCOME,\r\n  TRAINING,\r\n  TESTING\r\n}\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.css']\r\n})\r\nexport class AppComponent {\r\n  title: string = 'ml-handwriting-ui';\r\n  appState: AppState = AppState.WELCOME;\r\n  session: string = '';\r\n  public boundedNextState = this.nextState.bind(this);\r\n\r\n  public startTraining() {\r\n    if (this.appState == AppState.WELCOME) {\r\n      this.nextState();\r\n    }\r\n  }\r\n\r\n  public nextState(session: string = '') {\r\n    this.session = session;\r\n    switch (this.appState) {\r\n      case AppState.WELCOME:\r\n        this.appState = AppState.TRAINING;\r\n        break;\r\n      case AppState.TRAINING:\r\n        this.appState = AppState.TESTING;\r\n        break;\r\n      default:\r\n        this.appState = AppState.TESTING;\r\n    }\r\n  }\r\n\r\n}\r\n","<body class=\"d-flex flex-column\">\r\n  <app-header></app-header>\r\n  <main class=\"container-fluid flex-fill px-0 bg-secondary pb-4\">\r\n    <section class=\"jumbotron text-center mb-4 rounded-0\">\r\n      <div class=\"container\">\r\n        <h1 class=\"jumbotron-heading\">Welcome!</h1>\r\n        <p class=\"lead text-muted\">\r\n          This site allows you to train a machine learning model to recognize your\r\n          handwriting! It was built using Angular and Java Spring Boot.\r\n        </p>\r\n        <p>\r\n          <a href=\"#\" (click)=\"startTraining()\" class=\"btn btn-primary m-2\">Build a new model</a>\r\n          <a href=\"#\" class=\"btn btn-secondary m-2 disabled\">Load from existing session</a>\r\n        </p>\r\n      </div>\r\n    </section>\r\n\r\n    <model-builder *ngIf=\"appState > 0\" [onTrained]=\"boundedNextState\"></model-builder>\r\n    <model-tester *ngIf=\"appState > 1\" [sessionName]=\"session\"></model-tester>\r\n  </main>\r\n\r\n  <app-footer></app-footer>\r\n\r\n</body>\r\n\r\n\r\n\r\n\r\n\r\n\r\n","import {BrowserModule} from '@angular/platform-browser';\r\nimport {NgModule} from '@angular/core';\r\nimport {ReactiveFormsModule} from '@angular/forms';\r\n\r\nimport {AppRoutingModule} from './app-routing.module';\r\nimport {HttpClientModule} from '@angular/common/http';\r\nimport {AppComponent} from './app.component';\r\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\r\nimport {HeaderComponent} from './header/header.component';\r\nimport {FooterComponent} from './footer/footer.component';\r\nimport {CanvasComponent} from './canvas/canvas.component'\r\nimport {InputComponent} from './input/input.component'\r\nimport {ModelBuilderComponent} from './model-builder/model-builder.component';\r\nimport {ModelTesterComponent} from './model-tester/model-tester.component';\r\nimport {NetworkVisualizerComponent} from './network-visualizer/network-visualizer.component';\r\nimport {GridCanvasComponent} from './grid-canvas/grid-canvas.component';\r\n\r\n\r\n// state related imports\r\n// import { StoreModule } from '@ngrx/store';\r\n// import { StoreDevtoolsModule } from '@ngrx/store-devtools';\r\n// import { reducers, metaReducers } from './app-state/reducers';\r\n// import { CustomRouterStateSerializer } from './app-state/shared/utils';\r\n// import { StoreRouterConnectingModule, RouterStateSerializer } from '@ngrx/router-store';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        AppComponent,\r\n        HeaderComponent,\r\n        FooterComponent,\r\n        CanvasComponent,\r\n        InputComponent,\r\n        ModelBuilderComponent,\r\n        ModelTesterComponent,\r\n        NetworkVisualizerComponent,\r\n        GridCanvasComponent\r\n    ],\r\n    imports: [\r\n        BrowserModule,\r\n        AppRoutingModule,\r\n        BrowserAnimationsModule,\r\n        ReactiveFormsModule,\r\n        HttpClientModule,\r\n        /**\r\n         * StoreModule.forRoot is imported once in the root module, accepting a reducer\r\n         * function or object map of reducer functions. If passed an object of\r\n         * reducers, combineReducers will be run creating your application\r\n         * meta-reducer. This returns all providers for an @ngrx/store\r\n         * based application.\r\n\r\n         StoreModule.forRoot(reducers, { metaReducers }),\r\n\r\n         /**\r\n         * @ngrx/router-store keeps router state up-to-date in the store.\r\n\r\n         StoreRouterConnectingModule,\r\n\r\n         /**\r\n         * Store devtools instrument the store retaining past versions of state\r\n         * and recalculating new states. This enables powerful time-travel\r\n         * debugging.\r\n         *\r\n         * To use the debugger, install the Redux Devtools extension for either\r\n         * Chrome or Firefox\r\n         *\r\n         * See: https://github.com/zalmoxisus/redux-devtools-extension\r\n\r\n         !environment.production ? StoreDevtoolsModule.instrument() : [],\r\n\r\n         /**\r\n         * EffectsModule.forRoot() is imported once in the root module and\r\n         * sets up the effects class to be initialized immediately when the\r\n         * application starts.\r\n         *\r\n         * See: https://github.com/ngrx/platform/blob/master/docs/effects/api.md#forroot\r\n         */\r\n    ],\r\n    providers: [],\r\n    bootstrap: [AppComponent]\r\n})\r\nexport class AppModule {\r\n}\r\n","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class AppService {\r\n\r\n  constructor(private http: HttpClient) { }\r\n\r\n  rootURL = 'http://mlhandwriting-env.eba-6d8svthj.us-east-2.elasticbeanstalk.com/api';\r\n\r\n  trainingRequest(request: any) {\r\n      return this.http.post(this.rootURL + '/train', request);\r\n  }\r\n\r\n  recognitionRequest(request: any) {\r\n    return this.http.post(this.rootURL + '/identify', request);\r\n  }\r\n\r\n}\r\n","import {\r\n    Component,\r\n    Input,\r\n    AfterViewInit,\r\n    Output,\r\n    EventEmitter,\r\n    ViewChildren,\r\n    QueryList\r\n} from '@angular/core';\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {InputComponent} from \"../input/input.component\";\r\n\r\n@Component({\r\n    selector: 'app-canvas',\r\n    templateUrl: './canvas.component.html',\r\n    styleUrls: ['./canvas.component.css']\r\n})\r\n\r\nexport class CanvasComponent implements AfterViewInit {\r\n\r\n    @ViewChildren(InputComponent) components: QueryList<InputComponent>;\r\n\r\n    @Input() public trials: number = 1;\r\n    @Input() public data: {character: string, input: Array<{smoothImage: ImageData, pixelImage: ImageData}>} = null;\r\n\r\n    @Output() isAdded = new EventEmitter<{character: string, input: Array<{smoothImage: ImageData, pixelImage: ImageData}>}>();\r\n\r\n    public samples: Array<number>;\r\n    public locked: boolean;\r\n\r\n    charForm = new FormGroup({\r\n        selectedChar: new FormControl('', Validators.nullValidator && Validators.required),\r\n    });\r\n\r\n\r\n    ngOnInit() {\r\n        this.samples = Array.from(Array(this.trials),(x,i)=>i);\r\n\r\n        if (this.data != null) {\r\n            this.locked = true;\r\n            this.charForm.setValue({'selectedChar': this.data.character});\r\n        } else {\r\n            this.locked = false;\r\n        }\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n\r\n    }\r\n\r\n    private reset() {\r\n        this.clear();\r\n        this.charForm.reset();\r\n    }\r\n\r\n    public clear() {\r\n        this.components.forEach(item => item.clear())\r\n    }\r\n\r\n    public onAdd() {\r\n        if (!this.charForm.valid) {\r\n            return;\r\n        }\r\n\r\n        let character = this.charForm.value.selectedChar;\r\n        let outputs: Array<{smoothImage: ImageData, pixelImage: ImageData}> = [];\r\n        this.components.forEach(item => {\r\n            item.getViewData(({smoothImage, pixelImage}) => {\r\n                let output = {smoothImage: smoothImage, pixelImage: pixelImage};\r\n                outputs.push(output);\r\n                this.reset();\r\n                if (outputs.length == this.components.length) {\r\n                    console.log(this.charForm.value.selectedChar)\r\n                    this.isAdded.emit({character: character, input: outputs})\r\n                }\r\n            });\r\n        });\r\n    }\r\n}\r\n","<div class=\"\">\r\n    <form class=\"d-flex flex-column m-2 p-2\" [ngClass]=\"{'border border-light rounded': !locked }\" [formGroup]=\"charForm\" (ngSubmit)=\"onAdd()\" >\r\n        <div class=\"d-flex flex-row form-group\" *ngIf=\"!locked\" >\r\n            Char:&nbsp;&nbsp;<input type=\"text\" name=\"selectedChar\" class=\"form-control form-control-sm\" style=\"width: 50px !important;\" formControlName=\"selectedChar\" id=\"selectedChar\" placeholder=\"A\" maxlength=\"1\">\r\n        </div>\r\n        <div class=\"mb-0 text-center\" *ngIf=\"locked\">\r\n            <h6 class=\"h6\">{{charForm.value.selectedChar}}</h6>\r\n        </div>\r\n        <div *ngFor=\"let index of samples\" >\r\n            <input-canvas [data]=\"(data?.input[index] === null) ? null : {smoothImage: data.input[index].smoothImage, pixelImage: data.input[index].pixelImage}\"></input-canvas>\r\n        </div>\r\n        <div class=\"d-flex flex-row justify-content-between\" *ngIf=\"!locked\">\r\n            <button type=\"button\" class=\"btn btn-sm btn-danger\" (click)=\"clear()\">Clear</button>\r\n            <button type=\"submit\" class=\"btn btn-sm btn-primary\" [disabled]=\"!charForm.valid\">Add</button>\r\n        </div>\r\n    </form>\r\n</div>\r\n","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-footer',\r\n  templateUrl: './footer.component.html'\r\n})\r\nexport class FooterComponent implements OnInit {\r\n\r\n  public year: number = new Date().getFullYear();\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<footer class=\"text-muted text-center\">\r\n  <div class=\"container-fluid py-3 row align-content-center\">\r\n    <p class=\"col m-0\">© {{year}} Jonathan Doolittle</p>\r\n    <p class=\"col m-0\">Check out the <a href=\"https://github.com/jdoolittle126/hand-writing-ml\">GitHub</a>!</p>\r\n  </div>\r\n</footer>","import {AfterViewInit, Component, ElementRef, Input, OnInit, ViewChild} from '@angular/core';\r\n\r\n@Component({\r\n    selector: 'grid-canvas',\r\n    templateUrl: 'grid-canvas.component.html',\r\n    styleUrls: ['./grid-canvas.component.css']\r\n})\r\n\r\n// TODO Add to module!\r\nexport class GridCanvasComponent implements AfterViewInit {\r\n\r\n    @ViewChild('myCanvas') public canvas: ElementRef;\r\n\r\n    @Input() public cellSize: number = 10;\r\n    @Input() public borderSize: number = 1;\r\n    @Input() public gridHeight: number = 5;\r\n    @Input() public gridWidth: number = 5;\r\n\r\n    private canvasCx: CanvasRenderingContext2D;\r\n    private canvasEl: HTMLCanvasElement;\r\n\r\n    private grid: string[][];\r\n    private gridColor: string = 'black';\r\n\r\n    ngAfterViewInit() {\r\n        this.canvasEl = this.canvas.nativeElement;\r\n        this.canvasCx = this.canvasEl.getContext('2d');\r\n\r\n        this.canvasCx.fillStyle = this.gridColor;\r\n        this.canvasCx.strokeStyle = this.gridColor;\r\n\r\n        this.canvasEl.width = (this.cellSize + this.borderSize) * this.gridWidth + (this.borderSize * 2);\r\n        this.canvasEl.height = (this.cellSize + this.borderSize) * this.gridHeight + (this.borderSize * 2);\r\n        this.clear();\r\n    }\r\n\r\n    public clear() {\r\n        this.grid = Array.from({ length:this.gridWidth }, () => (Array.from({ length:this.gridHeight }, ()=> '')));\r\n        this.drawGrid();\r\n    }\r\n\r\n    public set(x: number, y: number, color: string, draw: boolean = true) {\r\n        if (this.grid && typeof this.grid[x][y] !== 'undefined') {\r\n            this.grid[x][y] = color;\r\n            if (draw) {\r\n                this.drawGrid();\r\n            }\r\n        }\r\n    }\r\n\r\n    public drawGrid(xStart: number = 0, yStart: number = 0) {\r\n        this.canvasCx.clearRect(0, 0, this.canvasEl.width, this.canvasEl.height);\r\n        let size = this.borderSize + this.cellSize;\r\n\r\n        for (let x = 0; x <  this.gridWidth; x++) {\r\n            for (let y = 0; y < this.gridHeight; y++) {\r\n                let cX = xStart + (x * this.cellSize);\r\n                let cY = yStart + (y *  this.cellSize);\r\n                this.canvasCx.fillStyle = this.gridColor;\r\n                this.canvasCx.strokeStyle = this.gridColor;\r\n                this.canvasCx.fillRect(cX, cY, size, size);\r\n\r\n                let color = (this.grid && typeof this.grid[x][y] !== 'undefined' && this.grid[x][y] !== '') ? this.grid[x][y] : 'NONE';\r\n\r\n                if (color == 'NONE') {\r\n                    this.canvasCx.clearRect(cX + this.borderSize, cY +  this.borderSize, this.cellSize - this.borderSize , this.cellSize - this.borderSize);\r\n                } else {\r\n                    this.canvasCx.fillStyle = color\r\n                    this.canvasCx.strokeStyle = color\r\n                    this.canvasCx.fillRect(cX + this.borderSize, cY +  this.borderSize, this.cellSize - this.borderSize , this.cellSize - this.borderSize);\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n\r\n}","<canvas class=\"nn\" #myCanvas></canvas>","import { Component, OnInit } from '@angular/core';\r\n\r\n@Component({\r\n  selector: 'app-header',\r\n  templateUrl: './header.component.html',\r\n  styleUrls: ['./header.component.css']\r\n})\r\nexport class HeaderComponent implements OnInit {\r\n\r\n  constructor() { }\r\n\r\n  ngOnInit(): void {\r\n  }\r\n\r\n}\r\n","<div class=\"header\">\r\n  <h1>Hand Writing Recognition with Machine Learning!</h1>\r\n</div>\r\n","import {\r\n    Component, Input, ElementRef, AfterViewInit, ViewChild, Output, EventEmitter\r\n} from '@angular/core';\r\nimport { fromEvent } from 'rxjs';\r\nimport { switchMap, takeUntil, pairwise } from 'rxjs/operators'\r\nimport {document} from \"ngx-bootstrap\";\r\nimport {ModelConfiguration} from \"../models/ModelConfiguration\";\r\n\r\n/*\r\n This code is based on https://medium.com/@tarik.nzl/creating-a-canvas-component-with-free-hand-drawing-with-rxjs-and-angular-61279f577415!\r\n */\r\n\r\n@Component({\r\n    selector: 'input-canvas',\r\n    templateUrl: './input.component.html',\r\n    styleUrls: ['./input.component.css']\r\n})\r\n\r\nexport class InputComponent implements AfterViewInit {\r\n\r\n    @ViewChild('smoothCanvas') public smoothCanvas: ElementRef;\r\n    @ViewChild('pixelCanvas') public pixelCanvas: ElementRef;\r\n\r\n    @Input() public width = 100;\r\n    @Input() public height = 100;\r\n    @Input() public data: {smoothImage: ImageData, pixelImage: ImageData} = null;\r\n\r\n    @Output() isAdded = new EventEmitter<{smoothImage: ImageData, pixelImage: ImageData}>();\r\n\r\n    public locked: boolean;\r\n    public isHovering = false;\r\n\r\n    private smoothCx: CanvasRenderingContext2D;\r\n    private smoothCanvasEl: HTMLCanvasElement;\r\n\r\n    private pixelCx: CanvasRenderingContext2D;\r\n    private pixelCanvasEl: HTMLCanvasElement;\r\n\r\n    ngOnInit() {\r\n        this.locked = this.data != null\r\n    }\r\n\r\n    public ngAfterViewInit() {\r\n        this.smoothCanvasEl = this.smoothCanvas.nativeElement;\r\n        this.smoothCx = this.smoothCanvasEl.getContext('2d');\r\n\r\n        this.pixelCanvasEl = this.pixelCanvas.nativeElement;\r\n        this.pixelCx = this.pixelCanvasEl.getContext('2d');\r\n\r\n        this.smoothCanvasEl.width = this.width;\r\n        this.smoothCanvasEl.height = this.height;\r\n\r\n        this.pixelCanvasEl.width = this.width;\r\n        this.pixelCanvasEl.height = this.height;\r\n\r\n        this.smoothCx.lineWidth = 15;\r\n        this.smoothCx.lineCap = 'round';\r\n        this.smoothCx.strokeStyle = '#000';\r\n\r\n        this.smoothCx.imageSmoothingEnabled = false;\r\n        this.pixelCx.imageSmoothingEnabled = false;\r\n\r\n        this.captureEvents(this.smoothCanvasEl);\r\n\r\n        if (this.locked) {\r\n            this.loadImage(this.data.smoothImage, this.data.pixelImage);\r\n        }\r\n    }\r\n\r\n    private static cropImageFromCanvas(ctx) {\r\n        let canvas = ctx.canvas,\r\n            w = canvas.width, h = canvas.height,\r\n            pix = {x:[], y:[]},\r\n            imageData = ctx.getImageData(0,0,canvas.width,canvas.height),\r\n            x, y, index;\r\n\r\n        for (y = 0; y < h; y++) {\r\n            for (x = 0; x < w; x++) {\r\n                index = (y * w + x) * 4;\r\n                if (imageData.data[index + 3] > 0) {\r\n                    pix.x.push(x);\r\n                    pix.y.push(y);\r\n                }\r\n            }\r\n        }\r\n        pix.x.sort(function(a,b){return a-b});\r\n        pix.y.sort(function(a,b){return a-b});\r\n        let n = pix.x.length-1;\r\n\r\n        w = 1 + pix.x[n] - pix.x[0];\r\n        h = 1 + pix.y[n] - pix.y[0];\r\n        let cut = ctx.getImageData(pix.x[0], pix.y[0], w, h);\r\n\r\n        canvas.width = w;\r\n        canvas.height = h;\r\n        ctx.putImageData(cut, 0, 0);\r\n    }\r\n\r\n    public showPixel() {\r\n        if (this.locked) {\r\n            this.isHovering = true;\r\n        }\r\n    }\r\n\r\n    public showSmooth() {\r\n        if (this.locked) {\r\n            this.isHovering = false;\r\n        }\r\n    }\r\n\r\n    public loadImage(smoothData: ImageData, pixelData: ImageData) {\r\n        this.smoothCx.putImageData(smoothData, 0, 0);\r\n        InputComponent.cropImageFromCanvas(this.smoothCx);\r\n\r\n        let renderCanvasEl: HTMLCanvasElement = document.createElement('canvas');\r\n        renderCanvasEl.className = 'nn';\r\n        renderCanvasEl.width = ModelConfiguration.PIXEL_GRID_WIDTH;\r\n        renderCanvasEl.height = ModelConfiguration.PIXEL_GRID_HEIGHT;\r\n        let context: CanvasRenderingContext2D = renderCanvasEl\r\n            .getContext('2d');\r\n\r\n        context.putImageData(pixelData, 0, 0);\r\n\r\n        let sImage = new Image(ModelConfiguration.PIXEL_GRID_WIDTH, ModelConfiguration.PIXEL_GRID_HEIGHT);\r\n        sImage.className = 'nn';\r\n        sImage.src = renderCanvasEl.toDataURL();\r\n        sImage.onload = () => {\r\n            let nScaleX = this.smoothCanvasEl.width / ModelConfiguration.PIXEL_GRID_WIDTH;\r\n            let nScaleY = this.smoothCanvasEl.height / ModelConfiguration.PIXEL_GRID_HEIGHT;\r\n            this.pixelCx.scale(nScaleX, nScaleY);\r\n            this.pixelCx.drawImage(renderCanvasEl, 0, 0)\r\n            InputComponent.cropImageFromCanvas(this.pixelCx);\r\n        };\r\n    }\r\n\r\n    public clear() {\r\n        this.smoothCanvasEl.getContext('2d')\r\n            .clearRect(0, 0, this.smoothCanvasEl.width, this.smoothCanvasEl.height);\r\n    }\r\n\r\n    public getBlankRenderCanvas(): {canvas: HTMLCanvasElement, context: CanvasRenderingContext2D} {\r\n        let renderCanvasEl: HTMLCanvasElement = document.createElement('canvas');\r\n        renderCanvasEl.className = 'nn';\r\n        renderCanvasEl.width = this.width;\r\n        renderCanvasEl.height = this.height;\r\n        let context: CanvasRenderingContext2D = renderCanvasEl\r\n            .getContext('2d');\r\n        context.imageSmoothingEnabled = false;\r\n\r\n        return {canvas: renderCanvasEl, context: context};\r\n    }\r\n\r\n    public getViewData(callback: ({smoothImage, pixelImage}) => void) {\r\n\r\n        let {canvas, context} = this.getBlankRenderCanvas();\r\n        context.putImageData(\r\n            this.smoothCx.getImageData(0, 0, this.smoothCanvasEl.width, this.smoothCanvasEl.height),\r\n            0, 0);\r\n        InputComponent.cropImageFromCanvas(context);\r\n\r\n        let smoothImageData = context.getImageData(0, 0, canvas.width, canvas.height);\r\n\r\n        let oldWidth = canvas.width;\r\n        let oldHeight = canvas.height;\r\n\r\n        let image = new Image();\r\n        image.className = 'nn';\r\n        image.src = canvas.toDataURL();\r\n        image.onload = () => {\r\n\r\n            let {canvas, context} = this.getBlankRenderCanvas();\r\n\r\n            canvas.width = ModelConfiguration.PIXEL_GRID_WIDTH;\r\n            canvas.height = ModelConfiguration.PIXEL_GRID_HEIGHT;\r\n\r\n            let scaleX = ModelConfiguration.PIXEL_GRID_WIDTH / oldWidth;\r\n            let scaleY = ModelConfiguration.PIXEL_GRID_HEIGHT / oldHeight;\r\n            context.scale(scaleX, scaleY);\r\n            context.drawImage(image, 0, 0);\r\n\r\n            let pixelImageData = context.getImageData(0, 0,  canvas.width,  canvas.height);\r\n\r\n            const { data } = pixelImageData;\r\n            const { length } = data;\r\n\r\n            for (let i = 0; i < length; i += 4) {\r\n                const a = data[i + 3];\r\n\r\n                if ( a < ModelConfiguration.PIXEL_ALPHA_THRESHOLD) {\r\n                    data[i + 0] = 255;\r\n                    data[i + 1] = 255;\r\n                    data[i + 2] = 255;\r\n                    data[i + 3] = 255;\r\n\r\n                } else {\r\n                    data[i + 0] = 0;\r\n                    data[i + 1] = 0;\r\n                    data[i + 2] = 0;\r\n                    data[i + 3] = 255;\r\n                }\r\n            }\r\n\r\n\r\n            let output = {smoothImage: smoothImageData, pixelImage: pixelImageData}\r\n            callback(output);\r\n            this.clear();\r\n        }\r\n    }\r\n\r\n\r\n    private captureEvents(canvasEl: HTMLCanvasElement) {\r\n        fromEvent(canvasEl, 'mousedown')\r\n            .pipe(\r\n                switchMap((e) => {\r\n                    return fromEvent(canvasEl, 'mousemove')\r\n                        .pipe(\r\n                            takeUntil(fromEvent(canvasEl, 'mouseup')),\r\n                            takeUntil(fromEvent(canvasEl, 'mouseleave')),\r\n                            pairwise()\r\n                        )\r\n                })\r\n            )\r\n            .subscribe((res: [MouseEvent, MouseEvent]) => {\r\n                const rect = canvasEl.getBoundingClientRect();\r\n\r\n                const prevPos = {\r\n                    x: res[0].clientX - rect.left,\r\n                    y: res[0].clientY - rect.top\r\n                };\r\n\r\n                const currentPos = {\r\n                    x: res[1].clientX - rect.left,\r\n                    y: res[1].clientY - rect.top\r\n                };\r\n\r\n                this.drawOnCanvas(prevPos, currentPos);\r\n            });\r\n    }\r\n\r\n    private drawOnCanvas(prevPos: { x: number, y: number }, currentPos: { x: number, y: number }) {\r\n        if (!this.smoothCx || this.locked) { return; }\r\n\r\n        this.smoothCx.beginPath();\r\n\r\n        if (prevPos) {\r\n            this.smoothCx.moveTo(prevPos.x, prevPos.y); // from\r\n            this.smoothCx.lineTo(currentPos.x, currentPos.y);\r\n            this.smoothCx.stroke();\r\n        }\r\n    }\r\n\r\n}\r\n","<div (mouseenter)=\"showPixel()\" (mouseleave)=\"showSmooth()\">\r\n    <canvas class=\"nn\" [hidden]=\"isHovering\" style=\"border: 1px solid #a8a8a8;\" #smoothCanvas></canvas>\r\n    <canvas class=\"nn\" [hidden]=\"!isHovering\" style=\"border: 1px solid #a8a8a8; width:100px; height: 100px;\" #pixelCanvas></canvas>\r\n</div>\r\n","import {Component, Input, OnDestroy, OnInit} from '@angular/core';\r\nimport {takeUntil} from \"rxjs/operators\";\r\nimport {Util} from \"../util\";\r\nimport {FormControl, FormGroup, Validators} from \"@angular/forms\";\r\nimport {AppService} from \"../app.service\";\r\nimport {Subject} from \"rxjs\";\r\n\r\nexport enum BuilderState {\r\n    SETTINGS,\r\n    TRAINING,\r\n    TRAINING_REQUESTED,\r\n    TRAINED\r\n}\r\n\r\n@Component({\r\n    selector: 'model-builder',\r\n    templateUrl: 'model-builder.component.html',\r\n    styleUrls: ['./model-builder.component.css']\r\n})\r\nexport class ModelBuilderComponent implements OnDestroy {\r\n\r\n    @Input() onTrained: (session: string) => void;\r\n\r\n    settingsForm = new FormGroup({\r\n        sampleNumber: new FormControl('1', Validators.nullValidator && Validators.required),\r\n        sessionName: new FormControl(Math.random().toString(36).replace(/[^a-z]+/g, '').substr(0, 10),\r\n            Validators.nullValidator && Validators.required\r\n        )\r\n    });\r\n\r\n    builderState: BuilderState = BuilderState.SETTINGS;\r\n    images: {character: string, input: Array<{smoothImage: ImageData, pixelImage: ImageData}>}[] = [];\r\n    stepNumber: number = 0;\r\n\r\n    destroy$: Subject<boolean> = new Subject<boolean>();\r\n\r\n    constructor(private appService: AppService) {\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next(true);\r\n        this.destroy$.unsubscribe();\r\n    }\r\n\r\n    nextState() {\r\n        switch (this.builderState) {\r\n            case BuilderState.SETTINGS:\r\n                this.builderState = BuilderState.TRAINING;\r\n                break;\r\n            case BuilderState.TRAINING:\r\n                this.builderState = BuilderState.TRAINING_REQUESTED;\r\n                break;\r\n            case BuilderState.TRAINING_REQUESTED:\r\n                this.builderState = BuilderState.TRAINED;\r\n                break;\r\n            default:\r\n                this.builderState = BuilderState.TRAINED;\r\n        }\r\n    }\r\n\r\n    onAdd(data: {character: string, input: Array<{smoothImage: ImageData, pixelImage: ImageData}>}) {\r\n        this.images.push(data);\r\n    }\r\n\r\n    onTrain() {\r\n        this.nextState();\r\n        let requestData: Array<{character: string, input: Array<Array<boolean>>}> = [];\r\n\r\n        for (const {character, input} of this.images) {\r\n            let pixelData: Array<Array<boolean>> = [];\r\n            for(const {smoothImage, pixelImage} of input) {\r\n                pixelData.push(Util.getPixelData(pixelImage));\r\n            }\r\n            requestData.push({character: character, input: pixelData})\r\n        }\r\n\r\n        let trainingRequest = {\r\n            sessionName: this.settingsForm.value.sessionName,\r\n            gridWidth: 5,\r\n            gridHeight: 6,\r\n            sampleCount: this.settingsForm.value.sampleNumber,\r\n            requestData: requestData\r\n        };\r\n\r\n        this.appService.trainingRequest(trainingRequest)\r\n            .pipe(takeUntil(this.destroy$))\r\n            .subscribe(data => {\r\n                console.log(data);\r\n                this.nextState();\r\n                this.onTrained(this.settingsForm.value.sessionName);\r\n            });\r\n    }\r\n\r\n\r\n}","<div>\r\n    <!-- MODEL BUILDER SETTINGS -->\r\n    <section>\r\n        <div class=\"container mt-2\" [formGroup]=\"settingsForm\" >\r\n            <div class=\"card\">\r\n                <h2 class=\"card-header\">Training Settings</h2>\r\n                <div class=\"card-body\">\r\n                    <div class=\"row\">\r\n                        <div class=\"form-group col-md-6\">\r\n                            <label for=\"sampleNumber\">Number of Samples</label>\r\n                            <input type=\"number\" name=\"sampleNumber\" class=\"form-control form-control-sm\" formControlName=\"sampleNumber\" id=\"sampleNumber\">\r\n                        </div>\r\n                    </div>\r\n                    <div class=\"row\">\r\n                        <div class=\"form-group col-md-6\">\r\n                            <label for=\"sessionName\">Session Name</label>\r\n                            <input type=\"text\" name=\"sessionName\" class=\"form-control form-control-sm\" formControlName=\"sessionName\" id=\"sessionName\">\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"card-footer\">\r\n                    <button (click)=\"nextState()\" [disabled]=\"builderState != 0\" class=\"btn btn-primary\">Training</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n    <!-- MODEL TRAINING -->\r\n    <section>\r\n        <div class=\"container mt-2\" *ngIf=\"builderState > 0\" >\r\n            <div class=\"card\">\r\n                <h2 class=\"card-header\">Train the model</h2>\r\n                <div class=\"card-body\">\r\n                    <div class=\"row\">\r\n                        <div *ngFor=\"let img of images;\">\r\n                            <div class=\"col-3\">\r\n                                <app-canvas [data]=\"img\" [trials]=\"settingsForm.value.sampleNumber\" ></app-canvas>\r\n                            </div>\r\n                        </div>\r\n                        <app-canvas (isAdded)=\"onAdd($event)\" *ngIf=\"builderState == 1\" [trials]=\"settingsForm.value.sampleNumber\"></app-canvas>\r\n                    </div>\r\n                </div>\r\n\r\n                <div class=\"card-footer\">\r\n                    <button (click)=\"onTrain()\" [disabled]=\"builderState != 1 || images.length == 0\" class=\"btn btn-primary\">Train the Model!</button>\r\n                    <p *ngIf=\"builderState == 2\">Loading... please wait!</p>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </section>\r\n\r\n\r\n</div>","import {Component, Input, OnDestroy, OnInit, ViewChild} from '@angular/core';\r\nimport {takeUntil} from \"rxjs/operators\";\r\nimport {InputComponent} from \"../input/input.component\";\r\nimport {Util} from \"../util\";\r\nimport {AppService} from \"../app.service\";\r\nimport {Subject} from \"rxjs\";\r\nimport {NetworkVisualizerComponent} from \"../network-visualizer/network-visualizer.component\";\r\n\r\nexport type GridData = {\r\n    width: number;\r\n    height: number;\r\n    data: number[];\r\n};\r\n\r\nexport type NetworkResult = {\r\n    inputsGrid: GridData;\r\n    weights1Grid: GridData;\r\n    hiddenGrid: GridData;\r\n    weights2Grid: GridData;\r\n    outputGrid: GridData;\r\n};\r\n\r\nexport type RecognitionResult = {\r\n    guess: string;\r\n    characters: string[];\r\n    inputs: number[];\r\n    weights1: number[];\r\n    hiddens: number[];\r\n    weights2: number[];\r\n    confidence: number[];\r\n}\r\n\r\n@Component({\r\n    selector: 'model-tester',\r\n    templateUrl: 'model-tester.component.html',\r\n    styleUrls: ['./model-tester.component.css']\r\n})\r\n\r\n\r\n// TODO Add to module!\r\nexport class ModelTesterComponent implements OnDestroy, OnInit {\r\n\r\n    @ViewChild('input') sampleInput: InputComponent;\r\n    @ViewChild('visual') networkVisual: NetworkVisualizerComponent;\r\n\r\n    @Input() sessionName: string;\r\n\r\n    previousSamples: {character: string, input: {smoothImage: ImageData, pixelImage: ImageData}}[] = [];\r\n    sample: {smoothImage: ImageData, pixelImage: ImageData} = null;\r\n    destroy$: Subject<boolean> = new Subject<boolean>();\r\n\r\n    networkResult: NetworkResult = null;\r\n\r\n    constructor(private appService: AppService) {\r\n    }\r\n\r\n    ngOnInit() {\r\n\r\n    }\r\n\r\n    ngOnDestroy(): void {\r\n        this.destroy$.next(true);\r\n        this.destroy$.unsubscribe();\r\n    }\r\n\r\n    onClear() {\r\n        this.sampleInput.clear();\r\n    }\r\n\r\n    onTry() {\r\n\r\n        this.sampleInput.getViewData(({smoothImage, pixelImage}) => {\r\n            this.sample = {smoothImage: smoothImage, pixelImage: pixelImage};\r\n\r\n            let recognitionRequest = {\r\n                sessionName: this.sessionName,\r\n                data: Util.getPixelData(this.sample.pixelImage)\r\n            }\r\n\r\n            this.appService.recognitionRequest(recognitionRequest).pipe(takeUntil(this.destroy$)).subscribe(data => {\r\n\r\n                let result: RecognitionResult = {\r\n                    guess: data['guess'],\r\n                    characters: data['characters'],\r\n                    inputs: data['inputs'],\r\n                    weights1: data['weights1'],\r\n                    hiddens: data['hiddens'],\r\n                    weights2: data['weights2'],\r\n                    confidence: data['confidence'],\r\n                }\r\n\r\n                let networkResult: NetworkResult = {\r\n                    inputsGrid: {\r\n                        width: result.inputs.length,\r\n                        height: 1,\r\n                        data: result.inputs\r\n                    },\r\n                    weights1Grid: {\r\n                        width: result.inputs.length,\r\n                        height: result.hiddens.length,\r\n                        data: result.weights1\r\n                    },\r\n                    hiddenGrid: {\r\n                        width: 1,\r\n                        height: result.hiddens.length,\r\n                        data: result.hiddens\r\n                    },\r\n                    weights2Grid: {\r\n                        width: result.characters.length,\r\n                        height: result.hiddens.length,\r\n                        data: result.weights2\r\n                    },\r\n                    outputGrid: {\r\n                        width: result.confidence.length,\r\n                        height: 1,\r\n                        data: result.confidence\r\n                    }\r\n                }\r\n\r\n                console.log(networkResult.inputsGrid)\r\n\r\n                this.networkResult = networkResult;\r\n\r\n                this.previousSamples.push({\r\n                    character: data['guess'],\r\n                    input: {smoothImage: smoothImage, pixelImage: pixelImage}\r\n                });\r\n\r\n            });\r\n\r\n        });\r\n    }\r\n\r\n\r\n}","<div class=\"container mt-2\" >\r\n\r\n    <section class=\"card\">\r\n        <h2 class=\"card-header\">Test your model!</h2>\r\n        <div class=\"card-body\">\r\n\r\n            <div class=\"row\" *ngIf=\"previousSamples.length > 0\">\r\n                <div *ngFor=\"let img of previousSamples;\">\r\n                    <div class=\"col-3\">\r\n                        <input-canvas class=\"text-center\" [data]=\"img.input\"></input-canvas>\r\n                        <p class=\"text-center font-weight-bold\">{{img.character}}</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n\r\n            <div class=\"row justify-content-around align-items-center\">\r\n                <div class=\"col-4\">\r\n                    <input-canvas class=\"text-center\" [data]=\"sample\" #input></input-canvas>\r\n                </div>\r\n\r\n                <network-visualizer *ngIf=\"networkResult != null\" #visual class=\"col\" [inputData]=\"networkResult\" [colorEmpty]=\"'#FF0000'\" [colorFull]=\"'#0000FF'\" ></network-visualizer>\r\n\r\n            </div>\r\n        </div>\r\n\r\n        <div class=\"card-footer\">\r\n            <button (click)=\"onClear()\" class=\"btn btn-danger mr-2\">Clear</button>\r\n            <button (click)=\"onTry()\" class=\"btn btn-primary\">Test</button>\r\n        </div>\r\n\r\n    </section>\r\n</div>","class TrainingData {\r\n    character: string;\r\n    input: Array<CanvasImageData>;\r\n}\r\n\r\nclass CanvasImageData {\r\n    smoothImage: ImageData;\r\n    pixelImage: ImageData;\r\n}\r\n\r\nclass ModelConfiguration {\r\n    static PIXEL_GRID_WIDTH: number = 5;\r\n    static PIXEL_GRID_HEIGHT: number = 6;\r\n    static PIXEL_ALPHA_THRESHOLD: number = 100;\r\n    numberOfSamples: number;\r\n    sessionName: string;\r\n\r\n}\r\n\r\nexport {TrainingData, CanvasImageData, ModelConfiguration};","import {AfterViewInit, Component, ElementRef, Input, OnChanges, OnInit, SimpleChanges, ViewChild} from '@angular/core';\r\nimport {ModelConfiguration} from \"../models/ModelConfiguration\";\r\nimport {GridCanvasComponent} from \"../grid-canvas/grid-canvas.component\";\r\nimport {GridData, NetworkResult} from \"../model-tester/model-tester.component\";\r\nimport {Util} from \"../util\";\r\n\r\n@Component({\r\n    selector: 'network-visualizer',\r\n    templateUrl: 'network-visualizer.component.html',\r\n    styleUrls: ['./network-visualizer.component.css']\r\n})\r\n\r\nexport class NetworkVisualizerComponent implements AfterViewInit, OnChanges {\r\n\r\n    @ViewChild('inputs') public inputs: GridCanvasComponent\r\n    @ViewChild('weights1') public weights1: GridCanvasComponent\r\n    @ViewChild('hidden') public hidden: GridCanvasComponent\r\n    @ViewChild('weights2') public weights2: GridCanvasComponent\r\n    @ViewChild('outputs') public outputs: GridCanvasComponent\r\n\r\n    @Input() public inputData: NetworkResult = null;\r\n    @Input() public colorEmpty: string;\r\n    @Input() public colorFull: string;\r\n\r\n    ngAfterViewInit() {\r\n        this.render();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges): void {\r\n        this.render();\r\n    }\r\n\r\n    private setFor(component: GridCanvasComponent, data: GridData) {\r\n        let index = 0;\r\n        let min = Math.min(...data.data);\r\n        let max = Math.max(...data.data);\r\n\r\n        for (let x = 0; x < data.width; x++) {\r\n            for (let y = 0; y < data.height; y++) {\r\n                let percent = (min == max) ? 1 : (data.data[index] - min) / (max - min);\r\n                let color = Util.newColor(this.colorEmpty, this.colorFull, percent);\r\n                component.set(x, y, color, false);\r\n                index++;\r\n            }\r\n        }\r\n        component.drawGrid();\r\n    }\r\n\r\n    public render() {\r\n\r\n        this.setFor(this.inputs, this.inputData.inputsGrid);\r\n        this.setFor(this.weights1, this.inputData.weights1Grid);\r\n        this.setFor(this.hidden, this.inputData.hiddenGrid);\r\n        this.setFor(this.weights2, this.inputData.weights2Grid);\r\n        this.setFor(this.outputs, this.inputData.outputGrid);\r\n\r\n        this.inputs.drawGrid();\r\n        this.weights1.drawGrid();\r\n        this.hidden.drawGrid();\r\n        this.weights2.drawGrid();\r\n        this.outputs.drawGrid();\r\n    }\r\n\r\n\r\n\r\n}","<div class=\"container\">\r\n    <div class=\"grid-container\">\r\n\r\n        <div class=\"inputs\">\r\n            <p class=\"\">Inputs:</p>\r\n            <grid-canvas [gridWidth]=\"inputData.inputsGrid.width\" [gridHeight]=\"inputData.inputsGrid.height\" #inputs></grid-canvas>\r\n        </div>\r\n\r\n        <div class=\"outputs\">\r\n            <p class=\"\">Outputs:</p>\r\n            <grid-canvas [gridWidth]=\"inputData.outputGrid.width\" [gridHeight]=\"inputData.outputGrid.height\" #outputs></grid-canvas>\r\n        </div>\r\n\r\n        <div class=\"weights1\">\r\n            <p class=\"\">Weights:</p>\r\n            <grid-canvas [gridWidth]=\"inputData.weights1Grid.width\" [gridHeight]=\"inputData.weights1Grid.height\" #weights1></grid-canvas>\r\n        </div>\r\n\r\n        <div class=\"hiddens\">\r\n            <p class=\"\">Hidden:</p>\r\n            <grid-canvas class=\"d-inline-block\" [gridWidth]=\"inputData.hiddenGrid.width\" [gridHeight]=\"inputData.hiddenGrid.height\" #hidden></grid-canvas>\r\n        </div>\r\n\r\n        <div class=\"weights2\">\r\n            <p class=\"\">Weights:</p>\r\n            <grid-canvas [gridWidth]=\"inputData.weights2Grid.width\" [gridHeight]=\"inputData.weights2Grid.height\" #weights2></grid-canvas>\r\n        </div>\r\n\r\n    </div>\r\n\r\n\r\n\r\n</div>","import {ModelConfiguration} from \"./models/ModelConfiguration\";\r\n\r\nexport class Util {\r\n\r\n    public static getPixelData(pixelImageData: ImageData): Array<boolean> {\r\n        let results: Array<boolean> = [];\r\n        const { data } = pixelImageData;\r\n\r\n\r\n        for (let x = 0; x < ModelConfiguration.PIXEL_GRID_WIDTH; x++) {\r\n            for (let y = 0; y < ModelConfiguration.PIXEL_GRID_HEIGHT; y++) {\r\n                let index = 4 * (ModelConfiguration.PIXEL_GRID_WIDTH * y + x);\r\n                let isFilled: boolean = !((data[index] + data[index + 1] + data[index + 2]) > 0);\r\n                results.push(isFilled);\r\n            }\r\n        }\r\n        return results;\r\n    }\r\n\r\n    public static newColor(colorStart: string, colorEnd: string, mix: number){\r\n        let hexStart = this.hexToRgb(colorStart);\r\n        let hexEnd = this.hexToRgb(colorEnd);\r\n\r\n\r\n        let newRgb = [\r\n            Math.ceil(((1 - mix) * hexStart.r) + (mix * hexEnd.r)),\r\n            Math.ceil(((1 - mix) * hexStart.g) + (mix * hexEnd.g)),\r\n            Math.ceil(((1 - mix) * hexStart.b) + (mix * hexEnd.b))\r\n        ];\r\n\r\n\r\n        return this.rgbToHex(newRgb[0], newRgb[1], newRgb[2]);\r\n    }\r\n\r\n    public static toHex(c: number) {\r\n        let hex = c.toString(16);\r\n        return hex.length == 1 ? \"0\" + hex : hex;\r\n    }\r\n\r\n    public static hexToRgb(hex) {\r\n        let result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\r\n        return result ? {\r\n            r: parseInt(result[1], 16),\r\n            g: parseInt(result[2], 16),\r\n            b: parseInt(result[3], 16)\r\n        } : null;\r\n    }\r\n\r\n    public static rgbToHex(r, g, b) {\r\n        return \"#\" + this.toHex(r) + this.toHex(g) + this.toHex(b);\r\n    }\r\n\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"]}